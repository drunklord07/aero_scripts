import os
import re
import json
import shutil
from multiprocessing import Pool, Manager, cpu_count
from docx import Document
from docx.shared import RGBColor
import xlsxwriter
from tqdm import tqdm

# === CONFIG ===
INPUT_FILE    = "input.txt"                    # your Aerospike log file
CHUNK_SIZE    = 2000                           # records per worker
OUTPUT_DOCX   = "aerospike_customer.docx"
OUTPUT_XLSX   = "aerospike_customer.xlsx"
TEMP_DIR      = "temp_aero_customer_parts"

customer_keys = [
    "customer id", "cust id", "customerid", "custid",
    "customer number", "cust number", "customer no", "cust no",
    "customeridnumber", "custidnumber"
]

# Precompile regex for fallback extraction:
#   keyword from customer_keys followed by ':' or '=' then value up to comma/brace/newline
KEYWORD_PATTERN = re.compile(
    r"(?P<key>" + "|".join(re.escape(k) for k in customer_keys) + r")\s*[:=]\s*(?P<val>[^,}\n\r]+)",
    flags=re.IGNORECASE
)

# === CLEANER FOR XML-COMPATIBLE STRINGS ===
def clean_xml_string(s: str) -> str:
    return "".join(
        ch for ch in s
        if ch in "\n\r\t"
        or (0x20 <= ord(ch) <= 0xD7FF)
        or (0xE000 <= ord(ch) <= 0xFFFD)
    )

# === FIND KEYS IN JSON OBJECTS ===
def find_keys(obj, keywords, path=None):
    """
    Recursively walk dict/list. If a dict key's lowercase contains any keyword,
    capture (path+[key], value).
    """
    if path is None:
        path = []
    matches = []
    if isinstance(obj, dict):
        for k, v in obj.items():
            lowkey = k.strip().lower()
            if any(kw in lowkey for kw in keywords):
                matches.append((path + [k], v))
            matches.extend(find_keys(v, keywords, path + [k]))
    elif isinstance(obj, list):
        for idx, item in enumerate(obj):
            matches.extend(find_keys(item, keywords, path + [str(idx)]))
    return matches

# === INLINE HIGHLIGHT HELPER ===
def add_highlighted_payload(para, payload, found_intervals):
    """
    Given intervals to highlight, write payload into para splitting runs.
    """
    merged = []
    for s, e in sorted(found_intervals):
        if not merged:
            merged.append([s, e])
        else:
            last = merged[-1]
            if s <= last[1]:
                last[1] = max(last[1], e)
            else:
                merged.append([s, e])
    pos = 0
    for start, end in merged:
        if start > pos:
            para.add_run(clean_xml_string(payload[pos:start]))
        run = para.add_run(clean_xml_string(payload[start:end]))
        run.font.color.rgb = RGBColor(255, 0, 0)
        pos = end
    if pos < len(payload):
        para.add_run(clean_xml_string(payload[pos:]))

# === LOAD & GROUP RECORDS ===
def load_records():
    records = []
    load_warnings = 0
    buffer = []
    in_record = False
    brace_count = 0
    header_re = re.compile(r"^Set\s+Name:\s*([^,]+),\s*Key:\s*(.+)", re.IGNORECASE)
    with open(INPUT_FILE, "r", encoding="utf-8", errors="ignore") as f:
        for raw_line in f:
            line = raw_line.rstrip("\r\n")
            if line.startswith("Set Name:"):
                if in_record and brace_count != 0:
                    load_warnings += 1
                buffer = [line]
                brace_count = line.count("{") - line.count("}")
                in_record = True
            elif in_record:
                buffer.append(line)
                brace_count += line.count("{") - line.count("}")
                if brace_count == 0:
                    if "JSON Data:" not in buffer[0]:
                        load_warnings += 1
                        in_record = False
                        continue
                    header_part, json_start = buffer[0].split("JSON Data:", 1)
                    m = header_re.match(header_part)
                    if not m:
                        load_warnings += 1
                        in_record = False
                        continue
                    set_name = m.group(1).strip()
                    key = m.group(2).strip().rstrip(",")
                    raw_json = "\n".join([json_start] + buffer[1:])
                    records.append((set_name, key, raw_json))
                    in_record = False
            else:
                load_warnings += 1
        if in_record and brace_count != 0:
            load_warnings += 1
    return records, load_warnings

# === SPLIT INTO CHUNKS ===
def chunk_records(records):
    for i in range(0, len(records), CHUNK_SIZE):
        yield records[i : i + CHUNK_SIZE], (i // CHUNK_SIZE)

# === WORKER FUNCTION ===
def process_chunk(args):
    chunk, idx, result_list = args
    lc_keys = {kw.lower() for kw in customer_keys}
    doc = Document()
    matches_data = []
    seen = 0
    with_customer = 0
    for set_name, key, raw_json in chunk:
        seen += 1
        json_matches = []
        fallback_matches = []
        # JSON parsing + recursive search
        try:
            obj = json.loads(raw_json)
        except json.JSONDecodeError:
            obj = None
        if obj is not None:
            found = find_keys(obj, lc_keys)
            for path, val in found:
                field_name = ".".join(path)
                json_matches.append((field_name, str(val)))
        # Regex fallback
        for m in KEYWORD_PATTERN.finditer(raw_json):
            fallback_matches.append((m.group("key").strip(), m.group("val").strip()))
        # Combine unique
        combined = []
        seen_pairs = set()
        for fn, vt in json_matches + fallback_matches:
            pair = (fn, vt)
            if pair not in seen_pairs:
                seen_pairs.add(pair)
                combined.append(pair)
        if not combined:
            continue
        with_customer += 1
        # Build Word paragraph
        para = doc.add_paragraph()
        para.add_run(clean_xml_string(f"{set_name} | {key} | "))
        # Highlight intervals
        highlight_intervals = []
        lower_json = raw_json.lower()
        for fn, vt in combined:
            sv = raw_json.find(vt)
            if sv != -1:
                highlight_intervals.append((sv, sv + len(vt)))
            kl = fn.split(".")[-1].lower()
            pk = lower_json.find(kl)
            if pk != -1:
                highlight_intervals.append((pk, pk + len(kl)))
        add_highlighted_payload(para, raw_json, highlight_intervals)
        # Append values
        para.add_run(" | value: ")
        for i, (_, vt) in enumerate(combined):
            if i:
                para.add_run(", ")
            rv = para.add_run(clean_xml_string(vt))
            rv.font.color.rgb = RGBColor(255, 0, 0)
        # Append fields
        para.add_run(" | field: ")
        for i, (fn, _) in enumerate(combined):
            if i:
                para.add_run(", ")
            rf = para.add_run(fn)
            rf.font.color.rgb = RGBColor(255, 0, 0)
        # Record for Excel
        for fn, vt in combined:
            matches_data.append((set_name, key, raw_json, vt, fn))
    # Save partial .docx
    if matches_data:
        os.makedirs(TEMP_DIR, exist_ok=True)
        doc.save(os.path.join(TEMP_DIR, f"chunk_{idx}.docx"))
    result_list.append((matches_data, seen, with_customer))

# === MERGE AND WRITE FUNCTIONS ===
def merge_word():
    merged = Document()
    for fn in tqdm(sorted(os.listdir(TEMP_DIR)), desc="Merging Word"):
        if not fn.endswith(".docx"):
            continue
        part = Document(os.path.join(TEMP_DIR, fn))
        for p in part.paragraphs:
            np = merged.add_paragraph()
            for r in p.runs:
                nr = np.add_run(r.text)
                if r.font.color and r.font.color.rgb:
                    nr.font.color.rgb = r.font.color.rgb
                nr.bold, nr.italic, nr.underline = r.bold, r.italic, r.underline
    merged.save(OUTPUT_DOCX)

def write_excel(all_matches):
    wb = xlsxwriter.Workbook(OUTPUT_XLSX)
    ws = wb.add_worksheet()
    red = wb.add_format({"font_color": "red"})
    ws.write_row(0, 0, ["Set Name", "Key", "Full JSON", "Customer", "Field"])
    r = 1
    for sn, k, rj, vt, fn in all_matches:
        ws.write(r, 0, sn)
        ws.write(r, 1, k)
        ws.write(r, 2, rj)
        ws.write(r, 3, vt, red)
        ws.write(r, 4, fn)
        r += 1
    wb.close()

# === MAIN ===
if __name__ == "__main__":
    if os.path.isdir(TEMP_DIR):
        shutil.rmtree(TEMP_DIR)
    print("=== CUSTOMER EXTRACTOR (Aerospike) ===")
    records, load_warnings = load_records()
    print(f"Total records: {len(records)}  (warnings: {load_warnings})")
    chunks = list(chunk_records(records))
    mgr = Manager()
    results = mgr.list()
    with Pool(min(cpu_count(), len(chunks))) as pool:
        list(tqdm(
            pool.imap_unordered(process_chunk, [(c, i, results) for c, i in chunks]),
            total=len(chunks), desc="Processing chunks"
        ))
    all_matches = []
    total = matched = 0
    for data, seen, with_customer in results:
        all_matches.extend(data)
        total += seen
        matched += with_customer
    print(f"Records scanned: {total}, with Customer matches: {matched}, total rows: {len(all_matches)}")
    if os.path.isdir(TEMP_DIR):
        merge_word()
    write_excel(all_matches)
    print(f"\n→ Word saved to {OUTPUT_DOCX}\n→ Excel saved to {OUTPUT_XLSX}")
