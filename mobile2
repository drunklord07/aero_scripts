import os
import re
import json
import shutil
from multiprocessing import Pool, Manager, cpu_count
from docx import Document
from docx.shared import RGBColor
import xlsxwriter
from tqdm import tqdm

# === CONFIG ===
INPUT_FILE   = "input.txt"                # your Aerospike log file
CHUNK_SIZE   = 2000                       # how many records to hand a worker at once
OUTPUT_DOCX  = "aerospike_mobiles.docx"
OUTPUT_XLSX  = "aerospike_mobiles.xlsx"
TEMP_DIR     = "temp_aero_parts"

# Core 10-digit body (starts 6–9), with optional +91/91/?0 prefix
MOBILE_REGEX = r'(?<!\d)((?:\+91[\-\s]?|91[\-\s]?|0)?[6-9]\d{9})(?!\d)'


# === UTIL: FLATTEN JSON ===
def flatten_json(obj, prefix=""):
    flat = {}
    if isinstance(obj, dict):
        for k, v in obj.items():
            path = f"{prefix}{k}"
            if isinstance(v, (dict, list)):
                flat.update(flatten_json(v, path + "."))
            elif isinstance(v, str) and v.strip().startswith(("{", "[")):
                try:
                    inner = json.loads(v)
                except:
                    flat[path] = v
                else:
                    flat.update(flatten_json(inner, path + "."))
            else:
                flat[path] = v
    elif isinstance(obj, list):
        for i, item in enumerate(obj):
            flat.update(flatten_json(item, f"{prefix}[{i}]."))
    return flat


# === LOAD & GROUP RECORDS ===
def load_records():
    """
    Read INPUT_FILE line-by-line, buffer JSON under 'Set Name:' headers,
    ignore pure-blank lines, and collect:
      - records: list of (set_name, key, raw_json)
      - load_warnings: total skips
      - skipped_lines: [(lineno, text), ...] for non-blank skips
    """
    records = []
    load_warnings = 0
    skipped_lines = []

    buffer = []
    in_record = False
    brace_count = 0
    header_re = re.compile(r"^Set\s+Name:\s*([^,]+),\s*Key:\s*(.+)", re.IGNORECASE)

    with open(INPUT_FILE, "r", encoding="utf-8", errors="ignore") as f:
        for lineno, raw in enumerate(f, start=1):
            line = raw.rstrip("\r\n")
            # If blank → just continue
            if not line.strip():
                continue

            if line.startswith("Set Name:"):
                # malformed previous?
                if in_record and brace_count != 0:
                    load_warnings += 1
                    skipped_lines.append((lineno, buffer[0]))
                buffer = [line]
                brace_count = line.count("{") - line.count("}")
                in_record = True

            elif in_record:
                buffer.append(line)
                brace_count += line.count("{") - line.count("}")

                if brace_count == 0:
                    # finalize record
                    if "JSON Data:" not in buffer[0]:
                        load_warnings += 1
                        skipped_lines.append((lineno, buffer[0]))
                    else:
                        hdr, json_start = buffer[0].split("JSON Data:", 1)
                        m = header_re.match(hdr)
                        if not m:
                            load_warnings += 1
                            skipped_lines.append((lineno, buffer[0]))
                        else:
                            set_name = m.group(1).strip()
                            key = m.group(2).strip().rstrip(",")
                            raw_json = "\n".join([json_start] + buffer[1:])
                            records.append((set_name, key, raw_json))
                    in_record = False

            else:
                # not in a record, non-blank → skip
                load_warnings += 1
                skipped_lines.append((lineno, line))

        # leftover open record
        if in_record and brace_count != 0:
            load_warnings += 1
            skipped_lines.append(("EOF", buffer[0] if buffer else ""))

    return records, load_warnings, skipped_lines


# === SPLIT INTO CHUNKS ===
def chunk_records(records):
    for i in range(0, len(records), CHUNK_SIZE):
        yield records[i : i + CHUNK_SIZE], i // CHUNK_SIZE


# === PROCESS ONE CHUNK (MOBILE EXTRACTION) ===
def process_chunk(args):
    chunk, idx, result_list = args
    pat = re.compile(MOBILE_REGEX)

    doc = Document()
    matches = []
    recs_seen = recs_with = parse_fail = 0
    parse_fail_details = []

    for set_name, key, raw in chunk:
        recs_seen += 1
        try:
            obj = json.loads(raw)
            flat = flatten_json(obj)
        except json.JSONDecodeError:
            parse_fail += 1
            snippet = raw[:100].replace("\n", " ") + "…"
            parse_fail_details.append((set_name, key, snippet))
            continue

        vals = [json.dumps(v) if isinstance(v, (dict, list)) else str(v)
                for v in flat.values()]

        raw_unesc = raw.replace('\\"', '"').replace("\\{", "{").replace("\\}", "}")
        hits = [m for m in pat.finditer(raw_unesc)]
        # keep only those in actual JSON values
        true_hits = [(m.group(1), m.span(1)) for m in hits
                     if any(m.group(1) in v for v in vals)]
        if not true_hits:
            continue

        recs_with += 1
        para = doc.add_paragraph(f"{set_name} | {key} | ")
        last = 0
        fields = []

        for mobile, (s, e) in sorted(true_hits, key=lambda x: x[1][0]):
            if s > last:
                para.add_run(raw_unesc[last:s])
            run = para.add_run(mobile)
            run.font.color.rgb = RGBColor(255, 0, 0)
            last = e

            # find which field contained it
            fld = ""
            for path, v in flat.items():
                if mobile in (json.dumps(v) if isinstance(v, (dict, list)) else str(v)):
                    fld = path
                    break
            fields.append(fld)

        if last < len(raw_unesc):
            para.add_run(raw_unesc[last:])

        para.add_run(" | field: ")
        for i, fld in enumerate(fields):
            if i:
                para.add_run(", ")
            fr = para.add_run(fld)
            fr.font.color.rgb = RGBColor(255, 0, 0)

        for mobile, _ in sorted(true_hits, key=lambda x: x[1][0]):
            matches.append((set_name, key, raw, mobile, fields.pop(0)))

    if matches:
        os.makedirs(TEMP_DIR, exist_ok=True)
        doc.save(os.path.join(TEMP_DIR, f"chunk_{idx}.docx"))

    result_list.append((matches, recs_seen, recs_with, parse_fail, parse_fail_details))


# === MERGE .docx CHUNKS ===
def merge_word():
    merged = Document()
    for fn in tqdm(sorted(os.listdir(TEMP_DIR)), desc="Merging Word"):
        if not fn.endswith(".docx"):
            continue
        sub = Document(os.path.join(TEMP_DIR, fn))
        for para in sub.paragraphs:
            out = merged.add_paragraph()
            for run in para.runs:
                nr = out.add_run(run.text)
                if run.font.color and run.font.color.rgb:
                    nr.font.color.rgb = run.font.color.rgb
                nr.bold, nr.italic, nr.underline = run.bold, run.italic, run.underline
    merged.save(OUTPUT_DOCX)


# === WRITE EXCEL ===
def write_excel(rows):
    wb = xlsxwriter.Workbook(OUTPUT_XLSX)
    ws = wb.add_worksheet()
    red = wb.add_format({"font_color": "red"})
    ws.write_row(0, 0, ["Set Name", "Key", "Full JSON", "Mobile", "Field"])
    r = 1
    for a, b, c, mob, fld in rows:
        ws.write(r, 0, a)
        ws.write(r, 1, b)
        ws.write(r, 2, c)
        ws.write(r, 3, mob, red)
        ws.write(r, 4, fld)
        r += 1
    wb.close()


# === MAIN ===
if __name__ == "__main__":
    # clean up
    if os.path.isdir(TEMP_DIR):
        shutil.rmtree(TEMP_DIR)

    # load
    print("Loading Aerospike records …")
    records, load_warnings, skipped = load_records()
    print(f"→ Total records loaded: {len(records)}  (warnings: {load_warnings})")
    if skipped:
        print("\nSkipped lines (non-blank):")
        for ln, txt in skipped:
            print(f"  line {ln}: {txt}")

    # chunk & process
    mgr = Manager()
    results = mgr.list()
    chunks = list(chunk_records(records))
    with Pool(min(cpu_count(), len(chunks))) as pool:
        list(tqdm(pool.imap_unordered(
            process_chunk,
            [(chunk, idx, results) for chunk, idx in chunks]
        ), total=len(chunks), desc="Processing chunks"))

    # aggregate & report
    all_rows = []
    total_seen = total_with = total_fail = 0
    fail_details = []
    for rows, seen, with_mob, fail, details in results:
        all_rows.extend(rows)
        total_seen += seen
        total_with += with_mob
        total_fail += fail
        fail_details.extend(details)

    print(f"\nScanned {total_seen} records, {total_with} had ≥1 mobile, "
          f"{len(all_rows)} total hits, {total_fail} JSON parse failures")
    if fail_details:
        print("\nJSON parse failures:")
        for sn, k, snip in fail_details:
            print(f"  {sn} | {k}: {snip}")

    # merge & write
    if os.path.isdir(TEMP_DIR) and total_seen > 0:
        merge_word()
    write_excel(all_rows)

    # cleanup
    if os.path.isdir(TEMP_DIR):
        shutil.rmtree(TEMP_DIR)

    print(f"\n→ Word saved to {OUTPUT_DOCX}")
    print(f"→ Excel saved to {OUTPUT_XLSX}\n")
