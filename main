#!/usr/bin/env python3
import os
import glob
import subprocess
import argparse
from concurrent.futures import ThreadPoolExecutor, as_completed

import pandas as pd
from tqdm import tqdm

def find_scripts():
    """
    Find all .py files in the current directory and subdirectories,
    excluding this driver script itself.
    """
    me = os.path.abspath(__file__)
    scripts = []
    for path in glob.glob("**/*.py", recursive=True):
        full = os.path.abspath(path)
        if full != me:
            scripts.append(path)
    return sorted(scripts)

def run_script(path):
    """
    Run `python path`, capture stdout/stderr.
    Returns:
      basename: filename without .py
      returncode
      missing: list of missing outputs (basename.docx / basename.xlsx)
      log: combined stdout+stderr
    """
    basename = os.path.splitext(os.path.basename(path))[0]
    proc = subprocess.run(
        ["python", path],
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        text=True,
    )
    missing = []
    for ext in ("docx", "xlsx"):
        if not os.path.exists(f"{basename}.{ext}"):
            missing.append(f"{basename}.{ext}")
    return {
        "basename": basename,
        "script": path,
        "returncode": proc.returncode,
        "missing": missing,
        "log": proc.stdout
    }

def main():
    parser = argparse.ArgumentParser(
        description="Run all extractor scripts in parallel and merge their Excel outputs."
    )
    parser.add_argument(
        "-c", "--combined", default="combined_output.xlsx",
        help="Name of the master Excel file (default: combined_output.xlsx)"
    )
    parser.add_argument(
        "-j", "--max-parallel", type=int, default=3,
        help="How many scripts to run at once"
    )
    args = parser.parse_args()

    scripts = find_scripts()
    print(f"Found {len(scripts)} Python scripts to run.\n")

    results = []
    with ThreadPoolExecutor(max_workers=args.max_parallel) as exe:
        futures = {exe.submit(run_script, s): s for s in scripts}
        for fut in tqdm(as_completed(futures), total=len(futures), desc="Running scripts"):
            res = fut.result()
            results.append(res)
            if res["returncode"] != 0:
                print(f"\n[ERROR] {res['script']} failed (exit {res['returncode']}):")
                print(res["log"])
            elif res["missing"]:
                print(f"[WARN] {res['script']} missing outputs: {res['missing']}")

    total = len(results)
    success = sum(1 for r in results if r["returncode"] == 0 and not r["missing"])
    print(f"\n→ Scripts run: {total}, succeeded: {success}, failed/skipped: {total - success}\n")

    # Gather all .xlsx named after basenames in cwd
    excels = []
    for r in results:
        if r["returncode"] == 0 and not r["missing"]:
            excels.append(f"{r['basename']}.xlsx")

    if not excels:
        print("No Excel files produced. Exiting.")
        return

    print(f"Merging {len(excels)} Excel files into {args.combined} …")
    with pd.ExcelWriter(args.combined, engine="xlsxwriter") as writer:
        for f in tqdm(excels, desc="Merging sheets"):
            df = pd.read_excel(f)
            sheet = os.path.splitext(os.path.basename(f))[0][:31]
            df.to_excel(writer, sheet_name=sheet, index=False)

    print(f"\n✅ Master workbook: {args.combined}")
    print("All individual .docx/.xlsx outputs remain in this folder.")

if __name__ == "__main__":
    main()
