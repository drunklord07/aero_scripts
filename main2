#!/usr/bin/env python3
import os
import glob
import re
import subprocess
import argparse
import shutil
import sys
from concurrent.futures import ThreadPoolExecutor, as_completed
from tqdm import tqdm
import pandas as pd

# -- ASCII‐safe print to avoid Unicode errors --
def safe_print(*args, **kwargs):
    msg = " ".join(str(a) for a in args)
    msg = msg.encode("ascii", "ignore").decode("ascii")
    print(msg, **kwargs)

# Force utf-8 in child scripts
ENV = os.environ.copy()
ENV["PYTHONIOENCODING"] = "utf-8"

# Extractor summary regex
SUMMARY_RE = re.compile(
    r"Scanned\s+\d+\s+records,\s+\d+\s+had\s+[^\n,]+,\s+(\d+)\s+total\s+hits",
    flags=re.IGNORECASE
)

def find_scripts():
    me = os.path.abspath(__file__)
    return sorted(
        fn for fn in glob.glob("**/*.py", recursive=True)
        if os.path.abspath(fn) != me
    )

def parse_expected_xlsx(path):
    base = os.path.splitext(os.path.basename(path))[0]
    txt  = open(path, encoding="utf-8", errors="ignore").read()
    m    = re.search(r'OUTPUT_XLSX\s*=\s*["\'](.+?\.xlsx)["\']', txt)
    return m.group(1) if m else f"{base}.xlsx"

def run_script(path):
    xlsx = parse_expected_xlsx(path)
    proc = subprocess.run(
        [sys.executable, path],
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        text=True,
        env=ENV,
        errors="replace"
    )
    log = proc.stdout
    m = SUMMARY_RE.search(log)
    hits = int(m.group(1)) if m else 0
    missing_xlsx = not os.path.isfile(xlsx)
    return {
        "basename": os.path.splitext(os.path.basename(path))[0],
        "returncode": proc.returncode,
        "xlsx": xlsx,
        "missing": missing_xlsx,
        "hits": hits,
        "log": log
    }

def main():
    # run from script directory
    base_dir = os.path.dirname(os.path.abspath(__file__))
    os.chdir(base_dir)

    p = argparse.ArgumentParser()
    p.add_argument("-c","--combined",default="combined_output.xlsx")
    p.add_argument("-j","--max-parallel", type=int, default=3)
    args = p.parse_args()

    scripts = find_scripts()
    safe_print(f"Found {len(scripts)} scripts to run.\n")

    outputs = os.path.join(base_dir, "outputs")
    if os.path.isdir(outputs):
        shutil.rmtree(outputs)
    os.makedirs(outputs)

    total_hits = 0
    results = []
    with ThreadPoolExecutor(max_workers=args.max_parallel) as exe:
        futures = {exe.submit(run_script, s): s for s in scripts}
        for fut in tqdm(as_completed(futures),
                        total=len(futures),
                        desc="Running scripts",
                        ascii=True):
            res = fut.result()
            results.append(res)
            total_hits += res["hits"]
            name = res["basename"]

            if res["returncode"] != 0:
                safe_print(f"[ERROR] {name} exited {res['returncode']}")
            elif res["missing"]:
                safe_print(f"[WARN]  {name} missing {res['xlsx']}")
            else:
                safe_print(f"[OK]    {name}")

            # copy outputs if produced
            if not res["missing"] and res["returncode"] == 0:
                for fn in (res["xlsx"], res["xlsx"][:-5] + ".docx"):
                    if os.path.isfile(fn):
                        shutil.copy(fn, outputs)

    total = len(results)
    ok = sum(1 for r in results if r["returncode"]==0 and not r["missing"])
    safe_print(f"\nScripts run: {total}, succeeded: {ok}, failed/skipped: {total-ok}")
    safe_print(f"Grand total hits: {total_hits}\n")

    excels = sorted(f for f in os.listdir(outputs) if f.endswith(".xlsx"))
    if not excels:
        safe_print("No Excel files to merge. Exiting.")
        sys.exit(1)

    safe_print(f"Merging {len(excels)} Excel files into '{args.combined}' …")
    with pd.ExcelWriter(args.combined, engine="xlsxwriter") as writer:
        for fname in tqdm(excels, desc="Merging", ascii=True):
            path = os.path.join(outputs, fname)
            try:
                df = pd.read_excel(path)
            except Exception as e:
                safe_print(f"[WARN] could not read {fname}: {e}")
                continue
            sheet = os.path.splitext(fname)[0][:31]
            df.to_excel(writer, sheet_name=sheet, index=False)

    safe_print(f"\nMaster workbook: {os.path.abspath(args.combined)}")
    safe_print(f"Outputs directory: {os.path.abspath(outputs)}")
    sys.exit(0 if ok==total else 1)

if __name__ == "__main__":
    main()
