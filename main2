#!/usr/bin/env python3
import os
import glob
import re
import subprocess
import argparse
import shutil
import sys
from concurrent.futures import ThreadPoolExecutor, as_completed
from tqdm import tqdm
import pandas as pd

# Force our prints to ASCII-only so we never blow up on Windows codepages
def safe_print(*args, **kwargs):
    msg = " ".join(str(a) for a in args)
    # strip non-ASCII
    msg = msg.encode("ascii", "ignore").decode("ascii")
    print(msg, **kwargs)

def find_scripts():
    me = os.path.abspath(__file__)
    return sorted(
        fn for fn in glob.glob("**/*.py", recursive=True)
        if os.path.abspath(fn) != me
    )

def parse_expected_outputs(path):
    base = os.path.splitext(os.path.basename(path))[0]
    text = open(path, encoding="utf-8", errors="ignore").read()
    m_x = re.search(r'OUTPUT_XLSX\s*=\s*["\'](.+?\.xlsx)["\']', text)
    m_d = re.search(r'OUTPUT_DOCX\s*=\s*["\'](.+?\.docx)["\']', text)
    return (m_x.group(1) if m_x else f"{base}.xlsx",
            m_d.group(1) if m_d else f"{base}.docx")

def run_script(path):
    exp_xlsx, exp_docx = parse_expected_outputs(path)
    env = os.environ.copy()
    env["PYTHONIOENCODING"] = "utf-8"
    proc = subprocess.run(
        [sys.executable, path],
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        text=True,
        env=env,
        errors="replace"
    )
    missing = [fn for fn in (exp_xlsx, exp_docx) if not os.path.isfile(fn)]
    return {
        "basename": os.path.splitext(os.path.basename(path))[0],
        "path": path,
        "returncode": proc.returncode,
        "expected_xlsx": exp_xlsx,
        "expected_docx": exp_docx,
        "missing": missing,
        "log": proc.stdout,
    }

def main():
    p = argparse.ArgumentParser()
    p.add_argument("-c", "--combined", default="combined_output.xlsx")
    p.add_argument("-j", "--max-parallel", type=int, default=3)
    args = p.parse_args()

    scripts = find_scripts()
    safe_print(f"Found {len(scripts)} scripts to run.\n")

    out_dir = "outputs"
    if os.path.isdir(out_dir):
        shutil.rmtree(out_dir)
    os.makedirs(out_dir)

    results = []
    with ThreadPoolExecutor(max_workers=args.max_parallel) as exe:
        futures = {exe.submit(run_script, s): s for s in scripts}
        for fut in tqdm(as_completed(futures),
                        total=len(futures),
                        desc="Running scripts",
                        ascii=True):
            res = fut.result()
            results.append(res)
            name = res["basename"]
            if res["returncode"] != 0:
                safe_print(f"[ERROR] {name} exited {res['returncode']}")
                safe_print(res["log"])
            elif res["missing"]:
                safe_print(f"[WARN] {name} missing outputs: {res['missing']}")
            else:
                # copy outputs if they exist
                for fn in (res["expected_docx"], res["expected_xlsx"]):
                    src = fn
                    dst = os.path.join(out_dir, fn)
                    try:
                        if os.path.exists(src):
                            shutil.copy(src, dst)
                    except FileNotFoundError:
                        # temp dirs or outputs may not exist for some scripts
                        continue

    total = len(results)
    ok = sum(1 for r in results if r["returncode"] == 0 and not r["missing"])
    safe_print(f"\nScripts run: {total}, succeeded: {ok}, failed/skipped: {total-ok}\n")

    # collect XLSX files
    excels = [
        os.path.join(out_dir, r["expected_xlsx"])
        for r in results
        if r["returncode"] == 0 and not r["missing"]
    ]
    safe_print(f"Merging {len(excels)} Excel files into {args.combined} â€¦")
    with pd.ExcelWriter(args.combined, engine="xlsxwriter") as writer:
        for f in tqdm(excels, desc="Merging sheets", ascii=True):
            try:
                df = pd.read_excel(f)
            except Exception as e:
                safe_print(f"[WARN] Skipping invalid Excel {f}: {e}")
                continue
            sheet = os.path.splitext(os.path.basename(f))[0][:31]
            df.to_excel(writer, sheet_name=sheet, index=False)

    safe_print(f"\nMaster workbook created: {args.combined}")
    safe_print(f"Outputs directory: ./{out_dir}")
    sys.exit(0 if ok == total else 1)

if __name__ == "__main__":
    main()
