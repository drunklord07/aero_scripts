import os
import re
import json
import shutil
from multiprocessing import Pool, Manager, cpu_count
from docx import Document
from docx.shared import RGBColor
import xlsxwriter
from tqdm import tqdm

# === CONFIG ===
INPUT_FILE   = "input.txt"
CHUNK_SIZE   = 2000
OUTPUT_DOCX  = "aerospike_mobiles.docx"
OUTPUT_XLSX  = "aerospike_mobiles.xlsx"
TEMP_DIR     = "temp_aero_parts"
MOBILE_REGEX = r'(?<!\d)((?:\+91[\-\s]?|91[\-\s]?|0)?[6-9]\d{9})(?!\d)'

# === FLATTEN JSON ===
def flatten_json(obj, prefix=""):
    flat = {}
    if isinstance(obj, dict):
        for k, v in obj.items():
            path = f"{prefix}{k}"
            if isinstance(v, (dict, list)):
                flat.update(flatten_json(v, path + "."))
            elif isinstance(v, str) and v.strip().startswith(("{", "[")):
                try:
                    inner = json.loads(v)
                except:
                    flat[path] = v
                else:
                    flat.update(flatten_json(inner, path + "."))
            else:
                flat[path] = v
    elif isinstance(obj, list):
        for i, item in enumerate(obj):
            flat.update(flatten_json(item, f"{prefix}[{i}]."))
    return flat

# === LOAD & GROUP RECORDS ===
def load_records():
    """
    Original loader semantics: every non-blank non-JSON-data line counts as a warning.
    Returns records, warnings, skipped_lines (for logging only).
    """
    records = []
    load_warnings = 0
    skipped_lines = []

    buffer = []
    in_record = False
    brace_count = 0
    header_re = re.compile(r"^Set\s+Name:\s*([^,]+),\s*Key:\s*(.+)", re.IGNORECASE)

    with open(INPUT_FILE, "r", encoding="utf-8", errors="ignore") as f:
        for lineno, raw in enumerate(f, 1):
            line = raw.rstrip("\r\n")
            if line.startswith("Set Name:"):
                if in_record and brace_count != 0:
                    load_warnings += 1
                    skipped_lines.append((lineno, buffer[0]))
                buffer = [line]
                brace_count = line.count("{") - line.count("}")
                in_record = True
            elif in_record:
                buffer.append(line)
                brace_count += line.count("{") - line.count("}")
                if brace_count == 0:
                    if "JSON Data:" not in buffer[0]:
                        load_warnings += 1
                        skipped_lines.append((lineno, buffer[0]))
                    else:
                        header_part, json_start = buffer[0].split("JSON Data:", 1)
                        m = header_re.match(header_part)
                        if not m:
                            load_warnings += 1
                            skipped_lines.append((lineno, buffer[0]))
                        else:
                            set_name = m.group(1).strip()
                            key = m.group(2).strip().rstrip(",")
                            raw_json = "\n".join([json_start] + buffer[1:])
                            records.append((set_name, key, raw_json))
                    in_record = False
            else:
                # count every non-blank line as warning
                if line.strip():
                    load_warnings += 1
                    skipped_lines.append((lineno, line))

        if in_record and brace_count != 0:
            load_warnings += 1
            skipped_lines.append(("EOF", buffer[0] if buffer else ""))

    return records, load_warnings, skipped_lines

# === SPLIT INTO CHUNKS ===
def chunk_records(records):
    for i in range(0, len(records), CHUNK_SIZE):
        yield records[i:i+CHUNK_SIZE], i//CHUNK_SIZE

# === PROCESS ONE CHUNK ===
def process_chunk(args):
    chunk, idx, result_list = args
    pat = re.compile(MOBILE_REGEX)

    doc = Document()
    rows = []
    recs_seen = recs_with = parse_fail = 0
    parse_fail_details = []

    for set_name, key, raw_json in chunk:
        recs_seen += 1
        try:
            obj = json.loads(raw_json)
            flat = flatten_json(obj)
        except json.JSONDecodeError:
            parse_fail += 1
            parse_fail_details.append((set_name, key, raw_json))
            continue

        vals = [json.dumps(v) if isinstance(v, (dict, list)) else str(v)
                for v in flat.values()]

        for m in pat.finditer(raw_json):
            num = m.group(1)
            if not any(num in v for v in vals):
                continue
            recs_with += 1
            para = doc.add_paragraph(f"{set_name} | {key} | ")
            run1 = para.add_run(raw_json.replace("\n"," "))
            run2 = para.add_run(f" | {num}")
            run2.font.color.rgb = RGBColor(255,0,0)
            field = ""
            for path, v in flat.items():
                txt = json.dumps(v) if isinstance(v,(dict,list)) else str(v)
                if num in txt:
                    field = path
                    break
            run3 = para.add_run(f" | field: {field}")
            run3.font.color.rgb = RGBColor(255,0,0)
            rows.append((set_name, key, raw_json, num, field))

    if rows:
        os.makedirs(TEMP_DIR, exist_ok=True)
        doc.save(os.path.join(TEMP_DIR, f"chunk_{idx}.docx"))

    result_list.append((rows, recs_seen, recs_with, parse_fail, parse_fail_details))

# === MERGE DOCX CHUNKS ===
def merge_word():
    merged = Document()
    for fn in tqdm(sorted(os.listdir(TEMP_DIR)), desc="Merging Word"):
        if not fn.endswith(".docx"):
            continue
        sub = Document(os.path.join(TEMP_DIR, fn))
        for p in sub.paragraphs:
            np = merged.add_paragraph()
            for r in p.runs:
                nr = np.add_run(r.text)
                if r.font.color and r.font.color.rgb:
                    nr.font.color.rgb = r.font.color.rgb
                nr.bold, nr.italic, nr.underline = r.bold, r.italic, r.underline
    merged.save(OUTPUT_DOCX)

# === WRITE EXCEL ===
def write_excel(rows):
    wb = xlsxwriter.Workbook(OUTPUT_XLSX)
    ws = wb.add_worksheet()
    red = wb.add_format({"font_color":"red"})
    ws.write_row(0, 0, ["Set Name","Key","Full JSON","Mobile","Field"])
    r = 1
    for a,b,c,m,f in rows:
        ws.write(r,0,a); ws.write(r,1,b); ws.write(r,2,c)
        ws.write(r,3,m, red); ws.write(r,4,f)
        r += 1
    wb.close()

if __name__ == "__main__":
    if os.path.isdir(TEMP_DIR):
        shutil.rmtree(TEMP_DIR)

    print("Loading Aerospike records …")
    recs, warns, skipped = load_records()
    print(f"Total records loaded: {len(recs)}  (warnings: {warns})")
    # Print skipped headers (malformed or non-JSON)
    for ln, txt in skipped:
        print(f"SKIPPED LINE {ln}: {txt}")

    mgr = Manager()
    results = mgr.list()
    chunks = list(chunk_records(recs))

    with Pool(min(cpu_count(), len(chunks))) as pool:
        list(tqdm(
            pool.imap_unordered(process_chunk,
                                [(chunk, idx, results) for chunk, idx in chunks]),
            total=len(chunks),
            desc="Processing chunks"
        ))

    all_rows = []
    tot = with_mob = pfail = 0
    pfails = []
    for rows, seen, wm, pf, pfd in results:
        all_rows.extend(rows)
        tot += seen
        with_mob += wm
        pfail += pf
        pfails.extend(pfd)

    print(f"\nScanned {tot} records, {with_mob} had matches, {len(all_rows)} hits, {pfail} JSON errors")
    if pfails:
        print("\nJSON parse errors for:")
        for sn, k, raw in pfails:
            print(f" RECORD {sn} | {k} → {raw}\n")

    if os.path.isdir(TEMP_DIR) and tot > 0:
        merge_word()
    write_excel(all_rows)

    if os.path.isdir(TEMP_DIR):
        shutil.rmtree(TEMP_DIR)

    print(f"\n→ Word saved: {OUTPUT_DOCX}")
    print(f"→ Excel saved: {OUTPUT_XLSX}\n")
