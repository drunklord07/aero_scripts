import os
import re
import json
import shutil
from multiprocessing import Pool, Manager, cpu_count
from docx import Document
from docx.shared import RGBColor
import xlsxwriter
from tqdm import tqdm

# === CONFIG ===
INPUT_FILE   = "input.txt"                # your Aerospike log file
CHUNK_SIZE   = 2000                       # how many records per worker
OUTPUT_DOCX  = "aerospike_mobiles.docx"
OUTPUT_XLSX  = "aerospike_mobiles.xlsx"
TEMP_DIR     = "temp_aero_parts"

# Core 10-digit Indian mobile regex
MOBILE_REGEX = r'(?<!\d)((?:\+91[\-\s]?|91[\-\s]?|0)?[6-9]\d{9})(?!\d)'


def flatten_json(obj, prefix=""):
    flat = {}
    if isinstance(obj, dict):
        for k, v in obj.items():
            path = f"{prefix}{k}"
            if isinstance(v, (dict, list)):
                flat.update(flatten_json(v, path + "."))
            elif isinstance(v, str) and v.strip().startswith(("{", "[")):
                try:
                    inner = json.loads(v)
                except:
                    flat[path] = v
                else:
                    flat.update(flatten_json(inner, path + "."))
            else:
                flat[path] = v
    elif isinstance(obj, list):
        for i, item in enumerate(obj):
            flat.update(flatten_json(item, f"{prefix}[{i}]."))
    return flat


def load_records():
    """
    Read INPUT_FILE line-by-line, skip blank/lone-brace lines,
    detect headers containing 'Set Name:', strip Key:… up to JSON Data:,
    count only the JSON braces, and return:
      records, load_warnings, skipped_lines
    """
    records = []
    load_warnings = 0
    skipped_lines = []
    header_line = None  # track current header for EOF warnings

    header_re = re.compile(
        r"Set\s+Name\s*:\s*([^,]+)"
        r"(?:\s*,\s*Key\s*:\s*([^,]+))?"
        r".*JSON\s*Data\s*:",
        flags=re.IGNORECASE
    )

    in_record = False
    brace_count = 0
    buffer = []

    with open(INPUT_FILE, "r", encoding="utf-8", errors="ignore") as f:
        for lineno, raw in enumerate(f, 1):
            line = raw.rstrip("\r\n")

            # 1) skip blank or single-brace
            if not line.strip() or line.strip() in ("{", "}"):
                continue

            # 2) header detection
            if "set name:" in line.lower():
                # previous record never closed?
                if in_record and brace_count != 0:
                    load_warnings += 1
                    skipped_lines.append((lineno, buffer[0]))
                # strip Key:… up to JSON Data:
                sanitized = re.sub(
                    r"(Set\s+Name:\s*[^,]+,\s*Key:\s*:)[\s\S]*?(JSON\s*Data\s*:)",
                    r"\1 \2",
                    line,
                    flags=re.IGNORECASE
                )
                header_line = sanitized
                buffer = [sanitized]
                after = sanitized.split("JSON Data:", 1)[1]
                brace_count = after.count("{") - after.count("}")
                in_record = True
                continue

            # 3) inside record
            if in_record:
                buffer.append(line)
                brace_count += line.count("{") - line.count("}")
                if brace_count == 0:
                    hdr = buffer[0]
                    if "JSON Data:" not in hdr:
                        load_warnings += 1
                        skipped_lines.append((lineno, hdr))
                    else:
                        m = header_re.match(hdr)
                        if not m:
                            load_warnings += 1
                            skipped_lines.append((lineno, hdr))
                        else:
                            set_name = m.group(1).strip()
                            key      = (m.group(2) or "").strip()
                            raw_json = "\n".join([hdr.split("JSON Data:",1)[1]] + buffer[1:])
                            records.append((set_name, key, raw_json))
                    in_record = False
                continue

            # 4) anything else non-blank
            load_warnings += 1
            skipped_lines.append((lineno, line))

        # 5) EOF with unclosed record
        if in_record and brace_count != 0:
            load_warnings += 1
            skipped_lines.append(("EOF", header_line or ""))

    return records, load_warnings, skipped_lines


def chunk_records(records):
    for i in range(0, len(records), CHUNK_SIZE):
        yield records[i : i + CHUNK_SIZE], i // CHUNK_SIZE


def process_chunk(args):
    chunk, idx, result_list = args
    pat = re.compile(MOBILE_REGEX)

    doc = Document()
    rows = []
    seen = with_phone = parse_fail = 0
    parse_fail_details = []

    for set_name, key, raw_json in chunk:
        seen += 1
        try:
            obj  = json.loads(raw_json)
            flat = flatten_json(obj)
        except json.JSONDecodeError:
            parse_fail += 1
            snippet = raw_json[:100].replace("\n"," ") + "…"
            parse_fail_details.append((set_name, key, snippet))
            continue

        values = [
            json.dumps(v) if isinstance(v, (dict, list)) else str(v)
            for v in flat.values()
        ]

        unesc = raw_json.replace('\\"','"').replace("\\{","{").replace("\\}","}")
        hits  = list(pat.finditer(unesc))
        true_hits = [
            (m.group(1), m.span(1))
            for m in hits if any(m.group(1) in v for v in values)
        ]
        if not true_hits:
            continue

        with_phone += 1
        para = doc.add_paragraph(f"{set_name} | {key} | ")
        last = 0
        fields = []

        for phone, (s, e) in sorted(true_hits, key=lambda x: x[1][0]):
            if s > last:
                para.add_run(unesc[last:s])
            run = para.add_run(phone)
            run.font.color.rgb = RGBColor(255, 0, 0)
            last = e

            fld = ""
            for path, v in flat.items():
                txt = json.dumps(v) if isinstance(v, (dict, list)) else str(v)
                if phone in txt:
                    fld = path
                    break
            fields.append(fld)

        if last < len(unesc):
            para.add_run(unesc[last:])

        para.add_run(" | field: ")
        for i, fld in enumerate(fields):
            if i: para.add_run(", ")
            fr = para.add_run(fld)
            fr.font.color.rgb = RGBColor(255, 0, 0)

        for phone, _ in sorted(true_hits, key=lambda x: x[1][0]):
            rows.append((set_name, key, raw_json, phone, fields.pop(0)))

    if rows:
        os.makedirs(TEMP_DIR, exist_ok=True)
        doc.save(os.path.join(TEMP_DIR, f"chunk_{idx}.docx"))

    result_list.append((rows, seen, with_phone, parse_fail, parse_fail_details))


def merge_word():
    merged = Document()
    for fn in tqdm(sorted(os.listdir(TEMP_DIR)), desc="Merging Word"):
        if not fn.endswith(".docx"):
            continue
        sub = Document(os.path.join(TEMP_DIR, fn))
        for para in sub.paragraphs:
            out = merged.add_paragraph()
            for run in para.runs:
                nr = out.add_run(run.text)
                if run.font.color and run.font.color.rgb:
                    nr.font.color.rgb = run.font.color.rgb
                nr.bold, nr.italic, nr.underline = run.bold, run.italic, run.underline
    merged.save(OUTPUT_DOCX)


def write_excel(rows):
    wb = xlsxwriter.Workbook(OUTPUT_XLSX)
    ws = wb.add_worksheet()
    red = wb.add_format({"font_color":"red"})
    ws.write_row(0, 0, ["Set Name","Key","Full JSON","Mobile","Field"])
    r = 1
    for a,b,c,ph,fld in rows:
        ws.write(r,0,a); ws.write(r,1,b); ws.write(r,2,c)
        ws.write(r,3,ph,red); ws.write(r,4,fld)
        r+=1
    wb.close()


if __name__ == "__main__":
    if os.path.isdir(TEMP_DIR):
        shutil.rmtree(TEMP_DIR)

    print("Loading Aerospike records …")
    recs, warn, skips = load_records()
    print(f"→ Total records loaded: {len(recs)}  (warnings: {warn})")
    if skips:
        print("\nSkipped lines:")
        for ln,txt in skips:
            print(f"  {ln}: {txt}")

    mgr = Manager()
    results = mgr.list()
    chunks = list(chunk_records(recs))

    with Pool(min(cpu_count(), len(chunks))) as pool:
        list(tqdm(
            pool.imap_unordered(
                process_chunk,
                [(chunk, idx, results) for chunk, idx in chunks]
            ),
            total=len(chunks), desc="Processing chunks"
        ))

    all_rows=[]; tot=with_phone=pfail=0; pfail_details=[]
    for rows,seen,wp,pf,pfd in results:
        all_rows.extend(rows)
        tot+=seen; with_phone+=wp; pfail+=pf; pfail_details+=pfd

    print(f"\nScanned {tot} records, {with_phone} had ≥1 mobile, "
          f"{len(all_rows)} hits, {pfail} JSON parse failures")
    if pfail_details:
        print("\nJSON parse failures:")
        for sn,k,snip in pfail_details:
            print(f"  {sn} | {k}: {snip}")

    if os.path.isdir(TEMP_DIR) and tot>0:
        merge_word()
    write_excel(all_rows)

    if os.path.isdir(TEMP_DIR):
        shutil.rmtree(TEMP_DIR)

    print(f"\n→ Word saved: {OUTPUT_DOCX}")
    print(f"→ Excel saved: {OUTPUT_XLSX}\n")
